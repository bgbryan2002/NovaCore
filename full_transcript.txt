 What's going on, everybody?  We are AfroSec Analytics, and this is our early demo program.  My name is Brennan Bryan, and I'm here with my teammates, Niall Austin, Brian Ford, and  Danny Grandison.  Imani Montgomery is out today.  So the main overview of our project, our project focuses on developing a machine  learning A.I. model for fraud detection in banks using transfer learning.  We will train the model with a labeled data set containing both fraudulent and  non-fraudulent transactions in order to enhance its accuracy and identifying  fraudulent activity.  The project aims to leverage pre-trained models and adapt them to our specific  data set to improve detection efficiency.  And our goal is to create a reliable and scalable fraud detection system that  minimizes false positives while accurately flagging fraudulent transactions.  So we had our last meeting last week.  So these are the updates that we had from those meetings, from that meeting.  What we accomplished from that meeting, what we accomplished from that meeting was  that we met with our advisor for the second time.  We did a better job narrowing down our scope for the project so we can know what's  doable in a semester.  And we also began to go into the data set on details that we need and what we  need to do to make sure that the data sets that we find will be sufficient  for our project.  We also developed an understanding of anomalies so we can know how to detect  them in the data set.  Basically, an anomaly is just seeing what outliers are in the data set to figure  out whether or not it could be fraud or not in making that decision.  So we had to, you know, continue to research and figure out a way to use  that in our AR detection.  We also developed an understanding of machine learning pipeline as well as  learning how to deploy it within Docker containers, which we will demonstrate  later on in this announcement.  And we also discussed a tentative plan for implementation.  The decisions we made from this meeting was that we determined specific  characteristics for our data set that we intend to train our AI model on,  which we will also demonstrate later on.  We also determined what we're going to research for our later AI models that we're  going to use so we can grasp how they detect fraudulent activities so we can  use that for our AI model.  And we also decided that we're going to use more contextual and collective  anomaly types to use that for our fraud discussions.  And we also decided to use supervised learning because we weren't able, well,  we were able to find a label data set that already had anomalies.  So we're just going to use that as reference.  And we also, we finally decided to visualize our categorized anomalies  within the data set.  So we're going to have like a column specifically for each anomaly.  And our next steps are, we will update project scope proposal and elevator  pitch, but based on the final scope that we made, and we will develop a  project execution plan and delegate tasks from there.  We also submit our meeting minutes and individual sprint retrospective  by that date as well.  And for the data set here, we have a data set that was found on Kaggle,  which is basically like a website where people can put data sets together  and just share them.  And so this data set has baked online and in-person baked transactions  with some of them that are flagged as fraud, so that when we feed it to  the machine learning algorithm, we can see what's going on in the data  machine learning algorithm that that's able to determine what's what.  And so some of the, I'm going to say criteria we have is like the type  of payment, the amount of payment.  And I'm going to say the name origin is basically the customer who made  the transaction and then you had the balance before the payment, the  balance after the payment, and then the name destination is the person  who's receiving the payment.  And then the old balance of the old of the person who's receiving it and  the balance of the person is receiving it.  And then we have if it's fraud or not.  Cool.  So now for the early demo, one of the things I've been trying  to do with Docker is to deploy a lightweight application called a  Flask app, just some background about Docker.  Docker is a platform as a service product that allows users to  virtualize containers and host applications within them.  Containers are an isolated environment that can run any code.  I've been trying to build an image of a container background about  images is that it's a read only template that contains the  instructions for creating a Docker container and includes a application  code, libraries, dependencies, and configuration files needed to run  the application.  Images are built in a Docker file, which defines the steps to  create an image and images are stored in a Docker registry or  Docker hub and can be shared and or reused.  Images are immutable, meaning that once created, it cannot be  changed and to update an image, you must create a new one.  I like to think of an image as kind of a blueprint or a  snapshot of a file system with all the necessary components to  run the application.  A container, which again is built from an image or is a  running instance of an image, is when you start a container,  Docker uses the image to create a writeable layer called a  container layer on top of the readable only image.  This allows the container to run the application and make  changes during its lifecycle so they are immutable.  Containers are isolated, lightweight, and portable  environments where applications can run independently of the  whole system.  Containers can be started, stopped, moved, or deleted.  Changes made to a container, for example, writing files,  installing software, are temporary and only exist when  the container is running unless explicitly committed to a new  image or blueprint of a container.  Think of a container as a live running process based on  the blueprint or image.  It's the actual house built from the blueprint.  So as I said before, I'm going to go to Docker right now.  Y'all still see my screen?  Yeah, we can see it.  It's still on the slides.  Yeah, it didn't move under the Docker yet.  I think that's your mind charge.  What about now?  Yeah, we can see your old screen.  Okay.  So this is the Docker homepage.  As you see, I've kind of made some makeshift containers down here,  kind of just running my own first container or whatever.  This comes as a tutorial in the Docker app, but my goal was  to create my own image, for instance, of an image that I  or instance of a Docker image.  And I'm doing that at Python by making my own Flask app.  Some background about Flask is that it's a lightweight and popular  Python web framework used for building web applications and  APIs or application programming interfaces.  It's known for its simplicity, flexibility, and ease of use,  making it a great choice for both beginners and experienced developers.  Flask is often referred to as a Michael framework because it provides  the essentials for web development without imposing too many  restrictions or dependencies.  So basically right here, I'm kind of just trying to make a hello  Docker page, you know, show when deployed this Flask app with the  provided code running Python app dot pod, which is the name of the file.  Starts a development server at HTTP 127.0.0.1 colon 5,000 dash last  visiting this URL in my browser triggers the hello world function,  which returns hello world as a response displaying it on the page.  The terminal logs that server set status and requests showing running  on that HTTP page and request details for production.  Um, I should use a server like GU unicorn instead of Flask  built, uh, in development servers.  Um, basically I'm still trying to learn or figure out how to deploy  this directly into, um, Docker.  Um, as of right now, it's kind of just running on my computer.  Um, the page isn't even showing up to be honest with you, but I'm  still in the stages of finding out the best way to, um, deploy these  type of, um, many apps into Docker.  My next steps would be to, um, after this, I deploy this Flask AI  would be to, uh, Docker rise a Python app and then, uh, a fast API.  And then, um, hopefully host a machine learning or AI, uh,  program within the container.  And I'm kind of just scaling up to that point right now.  Starting at ground zero with this Flask app, uh, which is my  own code and things like that.  But yeah, um, that is all for, uh, Afro set today.  Um, thank you for your time and, uh, we'll see you again later. 